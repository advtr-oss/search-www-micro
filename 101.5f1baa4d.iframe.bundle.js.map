{"version":3,"file":"101.5f1baa4d.iframe.bundle.js","mappings":";;AAOA;AACA;;;;;;AAQA;AAYA;;;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;AAGA;AAlCA;AAoCA;AACA;;;;AAhCA;AAqCA;AACA;;AAEA;;AA7CA;;;;;;;ACZA;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AAeA;;;;;;;;AAQA;;AAEA;;;;;;AAMA;;;;;;;AAOA;;;;;AAKA;;;;;;;;;;;;;AAaA;;;AAIA;;;;;AAKA;AACA;AACA;AACA;;;;;AAKA;;;AAGA;;AC5FA;ACJA;AACA;AACA;;;AAGA;ACLA","sources":["webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/GlobalStyle.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/ThemeSwitch/components.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/ThemeSwitch/index.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/Select/Wrapper.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/Select/Option/index.js"],"sourcesContent":["import kebabcase from \"lodash.kebabcase\";\nimport { normalize } from 'styled-normalize';\nimport { createGlobalStyle, css } from \"styled-components\";\nimport { get } from \"../utils/get\";\nimport { breakpoints, headers, resolve } from \"../utils/theme-helpers\";\n\nconst createContainer = (key, value) => css`\n\t.container-${kebabcase(key)} {\n\t  max-width: ${resolve(value)};\n\t  margin-right: auto;\n\t  margin-left: auto;\n\t  // Overwrite the bootstrap padding\n\t  padding: 0;\n\t}\n`;\n\nconst BP = Object.entries(breakpoints).map(([key, value]) => createContainer(key, value));\nconst elements = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\nconst mobileHeaders = Object.keys(headers).filter(el => el.includes('-mobile'));\n\nconst cssNames = header => elements.includes(header) ? `${header}, .${header}` : `.${header}`; // @ts-ignore\n\n\nconst mobileVersion = header => headers[`${header}-mobile`];\n\nconst hasMobileVersion = header => mobileHeaders.includes(`${header}-mobile`);\n\nexport const GlobalStyle = createGlobalStyle`\n\t${normalize}\n  \n  * {\n    box-sizing: border-box;\n  }\n  \n  body {\n    margin: 0;\n    font-family: ${get('typography.fontFamily.body')};\n    font-size: ${get('typography.fontSize.0')};\n    line-height: ${get('typography.lineHeight.default')};\n    font-weight: ${get('typography.fontWeight.regular')};\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    color: ${get('elements.foreground.default')};\n  }\n  \n  .mono {\n    font-family: ${get('typography.fontFamily.mono')};\n    color: ${get('elements.foreground.subtle')};\n  }\n  \n\t${BP}\n\n    // Have these here so can be used anywhere without a component\n  ${Object.entries(headers).filter(([key, _]) => !mobileHeaders.includes(key)).map(bp => css`\n    ${cssNames(bp[0])} {\n      font-size: ${resolve(bp[1])};\n      font-weight: ${get('typography.fontWeight.semiBold')};\n      line-height: 1.2;\n      \n      // If their is a mobile version of the header force it here\n      ${hasMobileVersion(bp[0]) ? css`\n          @media (max-width: ${resolve(breakpoints.small)}) {\n            font-size: ${resolve(mobileVersion(bp[0]))};\n          }\n        ` : null}\n    }\n  `)}\n`;","/**\n * A remake of https://codepen.io/rebelchris/pen/jOMGweo\n *\n * Simple, and elegant.\n * */\nimport styled, { keyframes } from \"styled-components\";\nimport { get } from \"../../utils/get\";\nimport { alpha } from \"@advtr/tidy-core\";\nconst toggle = keyframes`\n  0% {\n    left: 4px;\n  }\n\n  60% {\n    left: 4px;\n    width: 112px;\n  }\n\n  100% {\n    left: 104px;\n    width: 82px;\n  }\n`;\nconst reverse = keyframes`\n  0% {\n    left: 104px;\n    width: 82px;\n  }\n\n  60% {\n    left: 72px;\n    width: 112px;\n  }\n\n  100% {\n    left: 4px;\n  }\n`;\nexport const ToggleLabel = styled.label`\n  display: flex;\n  position: relative;\n\t\n  width: 200px;\n  height: 100px;\n\t\n  border-radius: 100px;\n  border: 5px solid ${get('elements.border.subtle')};\n\t\n  background: ${get('elements.canvas.overlay')};\n\n  transition: all 350ms ease-in;\n\t\n\t// Create the yellow on side of the switch\n\t&::before {\n    animation-name: ${reverse};\n    animation-duration: 350ms;\n    animation-fill-mode: forwards;\n    transition: all 350ms ease-in;\n    content: \"\";\n    width: 82px;\n    height: 82px;\n    border: 5px solid ${get('scheme.yellow.1')};\n    top: 4px;\n    left: 4px;\n    position: absolute;\n    border-radius: 82px;\n    background: ${get('scheme.yellow.2')};\n\t}\n\t\n\t&::after {\n    transition-delay: 0ms;\n    transition: all 250ms ease-in;\n    position: absolute;\n    content: \"\";\n    left: 143px;\n    top: 23px;\n    width: 10px;\n    height: 10px;\n    background: transparent;\n    border-radius: ${get('layout.border.radius.4')};\n    opacity: 0;\n\t}\n`;\nexport const ToggleCheckbox = styled.input`\n\tdisplay: none;\n\t\n\t&:checked { }\n\n  &:checked +${ToggleLabel}::before {\n    background: ${get('scheme.white')};\n    border-color: ${alpha(get('elements.border.muted'), 0.5)};\n    animation-name: ${toggle};\n    animation-duration: 350ms;\n    animation-fill-mode: forwards;\n  }\n\n  &:checked +${ToggleLabel}::after {\n    transition-delay: 350ms;\n    opacity: 1;\n    box-shadow: ${alpha(get('elements.border.muted'), 0.5)} -13px 0 0 2px, ${alpha(get('elements.border.muted'), 0.5)} -24px 14px 0 -2px;\n  }\n`;","import React, { useCallback, useMemo } from \"react\";\nimport propTypes from 'prop-types';\nimport { useTheme } from \"../../hooks/useTheme\";\nimport Wrapper from \"./Wrapper\";\nimport { ToggleLabel, ToggleCheckbox } from \"./components\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ThemeSwitch = ({\n  onClick\n}) => {\n  const theme = useTheme();\n  if (!theme) throw new Error('ThemeSwitch must be inside a <ThemeProvider> block');\n  const isChecked = useMemo(() => theme.colorScheme === 'dark', [theme]);\n  const handleClick = useCallback(e => {\n    theme.setColorScheme(prevState => {\n      return prevState == \"light\" ? \"dark\" : \"light\";\n    });\n    onClick && onClick(e);\n  }, [onClick, theme]);\n  return /*#__PURE__*/_jsxs(Wrapper, {\n    children: [/*#__PURE__*/_jsx(ToggleCheckbox, {\n      \"aria-label\": \"theme-toggle\",\n      type: \"checkbox\",\n      id: \"theme-toggle\",\n      checked: isChecked,\n      onChange: handleClick\n    }), /*#__PURE__*/_jsx(ToggleLabel, {\n      htmlFor: \"theme-toggle\"\n    })]\n  });\n};\nThemeSwitch.propTypes = {\n  onClick: propTypes.func\n};","import styled from 'styled-components';\nimport { get } from \"../../utils/get\";\nconst Wrapper = styled.select`\n  background-color: ${get('elements.canvas.inset')};\n\tborder-radius: ${get('layout.border.radius.1')};\n\tcolor: ${get('elements.foreground.default')};\n  border-style: none;\n\t\n\tpadding: ${get('layout.spacing.1')} ${get('layout.spacing.2')};\n`;\nexport default Wrapper;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class Option extends React.Component {\n  static propTypes = {\n    id: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.arrayOf(propTypes.string)]),\n    value: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.arrayOf(propTypes.string)]).isRequired\n  };\n\n  render() {\n    return /*#__PURE__*/_jsx(\"option\", {\n      value: this.props.id || this.props.value,\n      children: this.props.value\n    });\n  }\n\n}"],"names":[],"sourceRoot":""}