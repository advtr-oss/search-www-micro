{"version":3,"file":"936.9163b339.iframe.bundle.js","mappings":";;AAOA;AACA;;;;;;AAQA;AAYA;;;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;;;;AAIA;AACA;;;;AAIA;AACA;;;AAGA;;;AAGA;AAvCA;AAyCA;AACA;;;;AArCA;AA0CA;AACA;;AAEA;;AAlDA;;;;;;;ACZA;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AAeA;;;;;;;;AAQA;;AAEA;;;;;;AAMA;;;;;;;AAOA;;;;;AAKA;;;;;;;;;;;;;AAaA;;;AAIA;;;;;AAKA;AACA;AACA;AACA;;;;;AAKA;;;AAGA;;AC5FA;ACJA;AACA;AACA;;;AAGA;ACLA;;;;;;ACIA;AACA;;;;;AAKA;;;;AAIA;AACA;;;;;;AClBA;;;;;;;;ACYA;;AAEA;AACA;AAMA;AAMA;;AAOA;;;;AAIA;;;;AAIA;;;;;AAKA;AACA;;AC7CA;;AAGA;;AAOA;;AAEA;;;;AAMA;;;AAGA;;AAIA;;;;;;AAMA;AACA;;;;;;;;AAQA;;;;;AAKA;;AAGA;;AAEA;;;;;;ACzCA;;;;;ADsDA;AACA;AACA;AACA;AE7DA","sources":["webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/GlobalStyle.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/ThemeSwitch/components.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/ThemeSwitch/index.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/Select/Wrapper.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/Select/Option/index.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/_Input/Wrapper.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/_Input/reducer.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/Input/Wrapper.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/Input/components.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/utils/theme-helpers.js","webpack://search-ui/./node_modules/@advtr/tidy/dist/esm/components/Input/index.js"],"sourcesContent":["import kebabcase from 'lodash.kebabcase';\nimport { normalize } from 'styled-normalize';\nimport { createGlobalStyle, css } from 'styled-components';\nimport { get } from '../utils/get';\nimport { breakpoints, headers, resolve } from '../utils/theme-helpers';\n\nconst createContainer = (key, value) => css`\n\t.container-${kebabcase(key)} {\n\t  max-width: ${resolve(value)};\n\t  margin-right: auto;\n\t  margin-left: auto;\n\t  // Overwrite the bootstrap padding\n\t  padding: 0;\n\t}\n`;\n\nconst BP = Object.entries(breakpoints).map(([key, value]) => createContainer(key, value));\nconst elements = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\nconst mobileHeaders = Object.keys(headers).filter(el => el.includes('-mobile'));\n\nconst cssNames = header => elements.includes(header) ? `${header}, .${header}` : `.${header}`; // @ts-expect-error\n\n\nconst mobileVersion = header => headers[`${header}-mobile`];\n\nconst hasMobileVersion = header => mobileHeaders.includes(`${header}-mobile`);\n\nexport const GlobalStyle = createGlobalStyle`\n\t${normalize}\n  \n  * {\n    box-sizing: border-box;\n  }\n  \n  body {\n    margin: 0;\n    font-family: ${get('typography.fontFamily.body')};\n    font-size: ${get('typography.fontSize.1')};\n    line-height: ${get('typography.lineHeight.default')};\n    font-weight: ${get('typography.fontWeight.regular')};\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n\n    color: ${get('elements.foreground.default')};\n  }\n  \n  .mono {\n    font-family: ${get('typography.fontFamily.mono')};\n    color: ${get('elements.foreground.subtle')};\n  }\n  \n  code, kbd, samp {\n    font-family: ${get('typography.fontFamily.mono')};\n\t  font-size: ${get(\"typography.fontSize.0\")};\n  }\n  \n\t${BP}\n\n    // Have these here so can be used anywhere without a component\n  ${Object.entries(headers).filter(([key, _]) => !mobileHeaders.includes(key)).map(bp => css`\n    ${cssNames(bp[0])} {\n      font-size: ${resolve(bp[1])};\n      font-weight: ${get('typography.fontWeight.semiBold')};\n      line-height: 1.2;\n      \n      // If their is a mobile version of the header force it here\n      ${hasMobileVersion(bp[0]) ? css`\n          @media (max-width: ${resolve(breakpoints.small)}) {\n            font-size: ${resolve(mobileVersion(bp[0]))};\n          }\n        ` : null}\n    }\n  `)}\n`;","/**\n * A remake of https://codepen.io/rebelchris/pen/jOMGweo\n *\n * Simple, and elegant.\n * */\nimport styled, { keyframes } from 'styled-components';\nimport { get } from '../../utils/get';\nimport { alpha } from '@advtr/tidy-core';\nconst toggle = keyframes`\n  0% {\n    left: 4px;\n  }\n\n  60% {\n    left: 4px;\n    width: 112px;\n  }\n\n  100% {\n    left: 104px;\n    width: 82px;\n  }\n`;\nconst reverse = keyframes`\n  0% {\n    left: 104px;\n    width: 82px;\n  }\n\n  60% {\n    left: 72px;\n    width: 112px;\n  }\n\n  100% {\n    left: 4px;\n  }\n`;\nexport const ToggleLabel = styled.label`\n  display: flex;\n  position: relative;\n\t\n  width: 200px;\n  height: 100px;\n\t\n  border-radius: 100px;\n  border: 5px solid ${get('elements.border.subtle')};\n\t\n  background: ${get('elements.canvas.overlay')};\n\n  transition: all 350ms ease-in;\n\t\n\t// Create the yellow on side of the switch\n\t&::before {\n    animation-name: ${reverse};\n    animation-duration: 350ms;\n    animation-fill-mode: forwards;\n    transition: all 350ms ease-in;\n    content: \"\";\n    width: 82px;\n    height: 82px;\n    border: 5px solid ${get('scheme.yellow.1')};\n    top: 4px;\n    left: 4px;\n    position: absolute;\n    border-radius: 82px;\n    background: ${get('scheme.yellow.2')};\n\t}\n\t\n\t&::after {\n    transition-delay: 0ms;\n    transition: all 250ms ease-in;\n    position: absolute;\n    content: \"\";\n    left: 143px;\n    top: 23px;\n    width: 10px;\n    height: 10px;\n    background: transparent;\n    border-radius: ${get('layout.border.radius.4')};\n    opacity: 0;\n\t}\n`;\nexport const ToggleCheckbox = styled.input`\n\tdisplay: none;\n\t\n\t&:checked { }\n\n  &:checked +${ToggleLabel}::before {\n    background: ${get('scheme.white')};\n    border-color: ${alpha(get('elements.border.muted'), 0.5)};\n    animation-name: ${toggle};\n    animation-duration: 350ms;\n    animation-fill-mode: forwards;\n  }\n\n  &:checked +${ToggleLabel}::after {\n    transition-delay: 350ms;\n    opacity: 1;\n    box-shadow: ${alpha(get('elements.border.muted'), 0.5)} -13px 0 0 2px, ${alpha(get('elements.border.muted'), 0.5)} -24px 14px 0 -2px;\n  }\n`;","import React, { useCallback, useMemo } from 'react';\nimport propTypes from 'prop-types';\nimport { useTheme } from '../../hooks/useTheme';\nimport Wrapper from './Wrapper';\nimport { ToggleLabel, ToggleCheckbox } from './components';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const ThemeSwitch = ({\n  onClick\n}) => {\n  const theme = useTheme();\n  if (!theme) throw new Error('ThemeSwitch must be inside a <ThemeProvider> block');\n  const isChecked = useMemo(() => theme.colorScheme === 'dark', [theme]);\n  const handleClick = useCallback(e => {\n    theme.setColorScheme(prevState => {\n      return prevState == 'light' ? 'dark' : 'light';\n    });\n    onClick != null && onClick(e);\n  }, [onClick, theme]);\n  return /*#__PURE__*/_jsxs(Wrapper, {\n    children: [/*#__PURE__*/_jsx(ToggleCheckbox, {\n      \"aria-label\": \"theme-toggle\",\n      type: \"checkbox\",\n      id: \"theme-toggle\",\n      checked: isChecked,\n      onChange: handleClick\n    }), /*#__PURE__*/_jsx(ToggleLabel, {\n      htmlFor: \"theme-toggle\"\n    })]\n  });\n};\nThemeSwitch.propTypes = {\n  onClick: propTypes.func\n};","import styled from 'styled-components';\nimport { get } from '../../utils/get';\nconst Wrapper = styled.select`\n  background-color: ${get('elements.canvas.inset')};\n\tborder-radius: ${get('layout.border.radius.1')};\n\tcolor: ${get('elements.foreground.default')};\n  border-style: none;\n\t\n\tpadding: ${get('layout.spacing.1')} ${get('layout.spacing.2')};\n`;\nexport default Wrapper;","import React from 'react';\nimport propTypes from 'prop-types';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport class Option extends React.Component {\n  static propTypes = {\n    id: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.arrayOf(propTypes.string)]),\n    value: propTypes.oneOfType([propTypes.string, propTypes.number, propTypes.arrayOf(propTypes.string)]).isRequired\n  };\n\n  render() {\n    return /*#__PURE__*/_jsx(\"option\", {\n      value: this.props.id || this.props.value,\n      children: this.props.value\n    });\n  }\n\n}","import styled from 'styled-components';\nimport { get } from '../../utils/get'; // Add the very basic styling, just to set the tone\n\nconst Wrapper = styled.input`\n  width: 100%;\n\n  border-style: none;\n  color: ${get('elements.foreground.default')};\n\tbackground-color: ${get('elements.canvas.default')};\n\t\n\t// This could be adjusted to be a little nicer, maybe even using inherit,\n\t// but as a default input it will do\n\t&::placeholder {\n    color: ${get('elements.foreground.subtle')};\n\t}\n\t\n\t&:disabled {\n    color: ${get('elements.foreground.muted')};\n    background-color: ${get('elements.canvas.subtle')};\n\t}\n\n  &:focus {\n    outline: none;\n  }\n`;\nexport default Wrapper;","export function reducer(state, action) {\n  switch (action.type) {\n    case 'input':\n      return { ...state,\n        isEmpty: false\n      };\n\n    case 'blur':\n      return { ...state,\n        isFocussed: false\n      };\n\n    case 'focus':\n      return { ...state,\n        isFocussed: true\n      };\n\n    default:\n      throw new Error('Invalid Action ' + action);\n  }\n}","import styled from 'styled-components';\nimport * as _Input from '../_Input';\nimport { get } from '../../utils/get';\nimport { border as helper } from '../../utils/theme-helpers';\nconst Wrapper = styled.div`\n  position: relative;\n  width: 100%;\n\t\n\tdisplay: flex;\n  align-content: center;\n  align-items: center;\n\t\n  height: ${get('layout.spacing.7')};\n\n  color: ${get('elements.foreground.default')};\n  background-color: ${({\n  theme,\n  canvas\n}) => get(`elements.canvas.${canvas}`)({\n  theme\n})};\n\tbox-shadow: ${({\n  theme,\n  shadow\n}) => shadow && get(`elements.shadow.${shadow}`)({\n  theme\n})};\n  border: ${({\n  theme,\n  border\n}) => border && helper.custom(border)({\n  theme\n}) || 'none'};\n\t\n\tborder-radius: ${get('layout.border.radius.2')};\n\t\n\tpadding: 0 8px;\n\t\n\t${_Input.Wrapper} {\n\t\tpadding: 0 8px 0 8px;\n    background-color: inherit;\n\n    font-weight: ${get('typography.fontWeight.medium')};\n    line-height: 40px;\n\t}\n\t\n\t&:disabled {\n    color: ${get('elements.foreground.muted')};\n    background-color: ${get('elements.canvas.subtle')};\n\t}\n`;\nexport default Wrapper;","import styled, { css } from 'styled-components';\nimport { get } from '../../utils/get';\nimport { border, media } from '../../utils/theme-helpers';\nconst right = css`\n  padding-left: 8px;\n`;\nconst left = css`\n  padding-right: 8px;\n`;\n/**\n * This now works, not alone but when inside another div\n * */\n\nexport const IconContainer = styled.button`\n\t// Have to align is this way compared to how it was before\n  display: ${({\n  hide\n}) => hide ? 'none' : 'flex'};\n  align-items: center;\n\t\n  cursor: pointer;\n  height: ${get('layout.spacing.6')};\n  \n  // Pin it to the side\n\t${({\n  side\n}) => side === 'left' ? left : right};\n  \n  color: ${get('elements.foreground.default')};\n\tbackground-color: inherit;\n\tborder-style: none;\n  border-radius: 10px;\n  \n  & > svg {\n    width: ${get('layout.spacing.3')};\n    height: ${get('layout.spacing.3')};\n  }\n\t\n\t&:disabled {\n\t\tcursor: default;\n\t}\n\n  &:enabled > svg:hover {\n    color: ${get('elements.levels.active.foreground')};\n  }\n\n  &:disabled > svg {\n    cursor: default;\n    color: ${get('elements.foreground.muted')};\n  }\n`;\nexport const Listener = styled.kbd`\n\t// Have to align is this way compared to how it was before\n  display: ${({\n  hide\n}) => hide ? 'none' : 'flex'};\n  align-items: center;\n\t\n\tpadding: 2px;\n\t\n\t// For all larger screens make it slightly chunkier\n\t${media('small')} {\n\t\tpadding: 4px;\n\t}\n  \n\t// These can change\n  color: ${get('elements.foreground.default')};\n\tbackground-color: ${get('elements.canvas.overlay')};\n\tborder: ${border.style};\n  border-radius: ${border.default}\n`;","/**\n * A bunch of helpers that are added/created in GlobalStyle, so we can use classnames too,\n * or resolve to something so we can just use `${helper.header.h00}`\n * */\nimport { get } from './get';\nexport const resolve = fn => ctx => typeof fn === 'function' ? fn(ctx) : fn;\nexport const breakpoints = {\n  small: '544px',\n  medium: '768px',\n  large: '1012px',\n  extraLarge: '1280px'\n};\nexport function media(breakpoint) {\n  return `@media (min-width: ${breakpoints[breakpoint]})`;\n} // Heading sizes - mobile\n// h4-h6 remain the same size on both mobile & desktop\n\nconst mobileHeaders = {\n  'h00-mobile': get('typography.fontSize.6'),\n  'h0-mobile': get('typography.fontSize.5'),\n  'h1-mobile': '26px',\n  'h2-mobile': '22px',\n  'h3-mobile': '18px'\n};\nexport const headers = { ...mobileHeaders,\n  h000: '64px',\n  h00: get('typography.fontSize.7'),\n  h0: get('typography.fontSize.6'),\n  h1: get('typography.fontSize.5'),\n  h2: get('typography.fontSize.4'),\n  h3: get('typography.fontSize.3'),\n  h4: get('typography.fontSize.2'),\n  h5: get('typography.fontSize.1'),\n  h6: get('typography.fontSize.0')\n};\nexport const border = {\n  default: get('layout.border.radius.1'),\n  style: ctx => `1px solid ${get('elements.border.default')(ctx)}`,\n  custom: style => ctx => `1px solid ${get(`elements.border.${style}`)(ctx)}`,\n  circular: get('layout.border.radius.4')\n};","import React, { forwardRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport Wrapper from './Wrapper';\nimport { _Input } from '../_Input';\nimport { IconContainer } from './components';\nimport { useListener } from './actions';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport const Input = /*#__PURE__*/forwardRef(({\n  Icon,\n  hide,\n  side,\n  shadow,\n  canvas,\n  border,\n  listener,\n  onClick,\n  onBlur,\n  onFocus,\n  children,\n  ...props\n}, ref) => {\n  const [createListener, handleFocus, handleBlur] = useListener({\n    enabled: listener,\n    onFocus,\n    onBlur,\n    ref\n  });\n  /**\n  * Handle the Icons\n  * */\n\n  const child = useMemo(() => // First check for a children, if not check whether it's an icon, if not return null\n  children != null ? children : Icon != null ? /*#__PURE__*/_jsx(Icon, {\n    onClick: onClick,\n    disabled: props.disabled,\n    \"aria-label\": \"input-icon\"\n  }) : null, [Icon, children, onClick, props.disabled]);\n  const createIcon = useMemo(() => child != null && /*#__PURE__*/_jsx(IconContainer, {\n    hide: hide,\n    side: side,\n    disabled: props.disabled,\n    children: child\n  }), [child, hide, side, props.disabled]);\n  return /*#__PURE__*/_jsxs(Wrapper, {\n    shadow: shadow,\n    canvas: canvas,\n    border: border,\n    children: [side === 'left' && createIcon || createListener, /*#__PURE__*/_jsx(_Input, {\n      onBlur: handleBlur,\n      onFocus: handleFocus,\n      ...props,\n      ref: ref\n    }), side === 'right' && createIcon || createListener]\n  });\n});\nInput.defaultProps = {\n  side: 'left',\n  hide: false,\n  disabled: false,\n  listener: true,\n  placeholder: 'Input...',\n  shadow: null,\n  canvas: 'default',\n  border: 'default'\n};\nInput.propTypes = {\n  // _Input Props\n  disabled: PropTypes.bool,\n  onInput: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  className: PropTypes.string,\n  value: PropTypes.string,\n  placeholder: PropTypes.string,\n  'aria-label': PropTypes.string,\n  // IconContainer Props\n  hide: PropTypes.bool,\n  side: PropTypes.oneOf(['left', 'right']),\n  // IconProps Props\n  onClick: PropTypes.func,\n  listener: PropTypes.bool,\n  hideListener: PropTypes.bool,\n  // @ts-expect-error\n  Icon: PropTypes.elementType,\n  children: PropTypes.element,\n  // InputProps Props\n  // @ts-expect-error\n  canvas: PropTypes.oneOf(['default', 'inset', 'overlay']),\n  shadow: PropTypes.oneOf(['small', 'medium', 'large', 'extraLarge']),\n  border: PropTypes.oneOf(['default', 'subtle', 'muted'])\n};"],"names":[],"sourceRoot":""}